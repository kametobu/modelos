# -*- coding: utf-8 -*-
"""DROME - A n l i s e de dados.ipynb

 Automatically generated by Colaboratory.

 ## A N L I S E DE DADOS DE SENSORES DE TEMPERATURA DE EQUIPAMENTOS ULTRALOW DO SENAI CIMATEC BAHIA

 1. IMPORTANDO ARQUIVO DE DADOS DO SENSOR ESCOLHIDO
 2. CONVERTENDO A COLUNA DATA PARA FORMATO DE DATETIME64 DO PYTON
 3. COLOCANDO A DATA_HORA COMO INDICE DA S R I E
 """

import pandas as pd
import urllib3
import certifi
from urllib3 import request
import json
import matplotlib.pyplot as plt

# http = urllib3.PoolManager(cert_reqs="CERT_REQUIRED", ca_certs=certifi.where())
#
# url = "https://sistema.drome.com.br/api/getSensorsData?id_sensor=888&timestamp_inicial=1643670000&timestamp_final=1646092799&token=[TOKEN]"
# r = http.request("GET", url)
# r.status
#
#
# data = json.loads(r.data.decode("utf-8"))
# temp = pd.json_normalize(data)
# temp
temp = temp[["data_hora", "valor"]]
temp.data_hora = pd.to_datetime(temp.data_hora, unit="s")
temp.valor = pd.to_numeric(temp.valor)
temp.set_index("data_hora", inplace=True)
filtro = (
    (temp.valor != -1000)
    & (temp.index >= "2022-02-14 00:00")
    & (temp.index <= "2022-02-17 23:59")
)
temp = temp[filtro]
temp.info()
temp.head()
temp = temp.resample("T").median()
temp = temp.fillna(temp.mean())
temp.head()
# from google.colab import files
# temp.to_csv("temp.csv")
# qfiles.download("temp.csv")

"""PLOTANDO A CURVA DE TEMPERATURA IMPORTADA E CONVERTIDA

Aplicando filtro para reduzir o tamanho dos dados por conta do r u d o
(Tratar isso depois)
"""
temp.valor.plot(figsize=(16, 6))

"""APLICANDO DIFEREN AS PARA ANALISAR A SAZONALIDADE DA S R I E"""

temp.valor.diff().plot(figsize=(16, 6))

"""APRESENTANDO SAZONALIDADE POR HORA DO DIA"""

temp.diff().groupby(temp.index.hour).mean().plot(kind="bar", figsize=(16, 6))

"""CALCULANDO A A U T O C O R R E L A O DOS DADOS EM 1 HORA

DADOS APRESENTAM BOA C O R R E L A O E DEMONSTRA UM PERFIL CICLICO
"""
import pandas.util.testing as tm
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf

plt.figure(figsize=(16, 6))
plot_acf(temp["valor"], lags=60)
plt.show()

"""PLOTANDO O HISTOGRAMA PARA VALIDAR QUE OS DADOS OBEDECEM UMA
D I S T R I B U I O NORMAL"""
temp["valor"].plot(kind="kde")
plt.show()
# temp = temp.resample("30min").median()
# temp = temp.fillna(temp.mean())
# temp.head()
"""RODANDO TESTE PARA VALIDAR QUE OS DADOS PERTECEM UMA
D I S T R I B U I O NORMAL"""
import scipy.stats as stats

skew = stats.skew(temp["valor"])
print(skew)
from scipy.stats import normaltest

stat, p = normaltest(temp["valor"])
# p < 0.05 indica que a d i s t r i b u i o n o uma normal
print(p)
ad_stat, ad_critico, ad_teorico = stats.anderson(temp["valor"], "norm")
print(ad_stat)
print(ad_critico)
print(ad_teorico)

# ad_stat > que ad_critico[2] indica que a d i s t r i b u i o n o uma normal
"""**TESTANDO MODELO AR**"""

from statsmodels.tsa.ar_model import AR

ar_1 = AR(temp.valor, freq="T").fit(24)


print((ar_1.resid**2).mean())

ar_1.resid.describe()

ar_1.resid.plot(kind="box")

"""**TESTANDO MODELO ARMA**"""
from statsmodels.tsa.arima_model import ARMA

arma = ARMA(temp["valor"], freq="T", order=(2, 2)).fit()

plt.figure(figsize=(16, 6))
plt.plot(temp["valor"])
plt.plot(arma.predict())

n = len(temp.valor)
train_size = int(n * 2 / 3)
train_set = temp.valor[:train_size]
test_set = temp.valor[train_size:]

# plt.figure(figsize=(16,6))
# plt.plot(train_set)
# plt.plot(test_set)

arma_train = ARMA(train_set, freq="T", order=(2, 2)).fit()
arma_test = ARMA(test_set, freq="T", order=(2, 2)).fit(arma_train.params)
print((arma_test.resid**2).mean())
plt.plot(arma_test.predict(start="2022-02-18 00:00:00", end="2022-02-18 01:00:00"))
plt.legend(["Dados de Treinamento (Reais)", "Dados de Teste (Reais)", "Previs o"])

print(arma_test.forecast())

# print(arma_test.predict(start="2022-02-18 00:00:00", end="2022-02-1801:00:00").to_csv())

"""**TESTANDO MODELO ARIMA**"""

from statsmodels.tsa.arima_model import ARIMA


arima = ARIMA(temp.valor, freq="T", order=(3, 1, 10)).fit()

print((arima.resid**2).mean())

plt.figure(figsize=(16, 6))
plt.plot(temp["valor"])
plt.plot(arima.predict(typ="levels"))
print(arima.forecast())
plt.legend(["Dados de Treinamento (Reais)", "Modelo ARIMA", "Previs o"])
arima_data = arima.predict(
    typ="levels", start="2022-02-18 00:00:00", end="2022-02-18 06:00:00"
)
plt.plot(arima_data)
# print(arima_data.to_csv())

from statsmodels.tsa.arima_model import ARMA

temp = temp.resample("30min").median()
temp = temp.fillna(temp.mean())
temp.head()

arma = ARMA(temp["valor"], freq="30min", order=(2, 2)).fit()

plt.figure(figsize=(16, 6))
plt.plot(temp["valor"])
plt.plot(arma.predict())

n = len(temp.valor)
train_size = int(n * 2 / 3)
train_set = temp.valor[:train_size]
test_set = temp.valor[train_size:]

# plt.figure(figsize=(16,6))
# plt.plot(train_set)
# plt.plot(test_set)

arma_train = ARMA(train_set, freq="30min", order=(2, 2)).fit()
arma_test = ARMA(test_set, freq="30min", order=(2, 2)).fit(arma_train.params)

print((arma_test.resid**2).mean())


plt.plot(arma_test.predict(start="2022-02-18 00:00:00", end="2022-02-18 01:00:00"))
plt.legend(["Dados de Treinamento (Reais)", "Dados de Teste (Reais)", "Previs o"])

print(arma_test.forecast())

pd.set_option("display.max_rows", temp.shape[0] + 1)
print(forecast.to_csv())
